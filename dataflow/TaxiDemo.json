{
	"name": "TaxiDemo",
	"properties": {
		"type": "WranglingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"name": "TripData",
					"script": "",
					"dataset": {
						"referenceName": "TripData",
						"type": "DatasetReference"
					}
				},
				{
					"name": "TripFares",
					"script": "",
					"dataset": {
						"referenceName": "TripFares",
						"type": "DatasetReference"
					}
				}
			],
			"sinks": [
				{
					"name": "TaxiSink",
					"dataset": {
						"referenceName": "TaxiSink",
						"type": "DatasetReference"
					},
					"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TaxiSink"
				}
			],
			"script": "section Section1; shared #\"TripData\" = let AdfDoc = Web.Contents(\"https://perlovskybugbash.dfs.core.windows.net/sample-data/trip_data_1.csv?sv=2018-03-28&sig=cNY%2B7CJBqYHmMsGWrPEKWX68YW9I6Gl1%2FWm4rN5cr94%3D&spr=https&se=2019-10-23T23%3A44%3A43Z&srt=sco&ss=bf&sp=rwl\"), Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.None]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]), TrimmedHeaders = Table.TransformColumnNames(PromotedHeaders, (columnName as text) as text => Text.Trim(columnName)) in TrimmedHeaders;shared #\"TripFares\" = let AdfDoc = Web.Contents(\"https://perlovskybugbash.dfs.core.windows.net/sample-data/taxi_fares.csv?sv=2018-03-28&sig=YSnHs6YwkEDamsQZ8sHroKMy35i942rqgPO%2Fomq9Nh0%3D&spr=https&se=2019-10-23T23%3A44%3A44Z&srt=sco&ss=bf&sp=rwl\"), Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.None]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]), TrimmedHeaders = Table.TransformColumnNames(PromotedHeaders, (columnName as text) as text => Text.Trim(columnName)) in TrimmedHeaders;\r\nshared UserQuery = let\r\n  Source = TripData,\r\n  #\"Inner Join\" = Table.NestedJoin(Source, {\"medallion\", \"hack_license\", \"vendor_id\", \"pickup_datetime\"}, TripFares, {\"medallion\", \"hack_license\", \"vendor_id\", \"pickup_datetime\"}, \"TripFares\", JoinKind.Inner),\r\n  #\"Expanding Joined Tables\" = Table.ExpandTableColumn(#\"Inner Join\", \"TripFares\", {\"medallion\", \"hack_license\", \"vendor_id\", \"pickup_datetime\", \"payment_type\", \"fare_amount\", \"surcharge\", \"mta_tax\", \"tip_amount\", \"tolls_amount\", \"total_amount\"}, {\"TripFares.medallion\", \"TripFares.hack_license\", \"TripFares.vendor_id\", \"TripFares.pickup_datetime\", \"TripFares.payment_type\", \"TripFares.fare_amount\", \"TripFares.surcharge\", \"TripFares.mta_tax\", \"TripFares.tip_amount\", \"TripFares.tolls_amount\", \"TripFares.total_amount\"}),\r\n  #\"Converting to Decimal Types\" = Table.TransformColumnTypes(#\"Expanding Joined Tables\", {{\"TripFares.total_amount\", type number}, {\"passenger_count\", type number}, {\"trip_time_in_secs\", type number}, {\"trip_distance\", type number}}),\r\n  #\"Aggregating on Vendor ID\" = Table.Group(#\"Converting to Decimal Types\", {\"vendor_id\"}, {{\"total_passenger_count\", each List.Sum([passenger_count]), type number}, {\"total_trip_time_in_secs\", each List.Sum([trip_time_in_secs]), type number}, {\"total_trip_distance\", each List.Sum([trip_distance]), type number}, {\"total_trip_fare\", each List.Sum([TripFares.total_amount]), type number}})\r\nin\r\n  #\"Aggregating on Vendor ID\";"
		}
	}
}